
Nhom2_Day8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000618  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007ac  080007b4  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007ac  080007ac  000107b4  2**0
                  CONTENTS
  4 .ARM          00000000  080007ac  080007ac  000107b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007ac  080007b4  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007ac  080007ac  000107ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007b0  080007b0  000107b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018df  00000000  00000000  000107e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000559  00000000  00000000  000120c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  00012620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000268  00000000  00000000  000128c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd0f  00000000  00000000  00012b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001646  00000000  00000000  0001e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003b822  00000000  00000000  0001fe7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  0005b69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b0c  00000000  00000000  0005b770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000794 	.word	0x08000794

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000794 	.word	0x08000794

080001d4 <delay_ms>:

#define BTN_PRESSED            Bit_RESET   // Vì dùng GPIO_PuPd_UP
#define BTN_RELEASED           Bit_SET

// ---------- HÀM TRỢ GIÚP ----------
void delay_ms(uint32_t time) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < (time * 800); i++);
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay_ms+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80001ee:	fb02 f303 	mul.w	r3, r2, r3
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d3f4      	bcc.n	80001e2 <delay_ms+0xe>
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr

08000206 <init_output>:

void init_output(GPIO_TypeDef* port, uint16_t pin, uint32_t clock) {
 8000206:	b580      	push	{r7, lr}
 8000208:	b086      	sub	sp, #24
 800020a:	af00      	add	r7, sp, #0
 800020c:	60f8      	str	r0, [r7, #12]
 800020e:	460b      	mov	r3, r1
 8000210:	607a      	str	r2, [r7, #4]
 8000212:	817b      	strh	r3, [r7, #10]
    GPIO_InitTypeDef GPIO_InitStruct;
    RCC_AHB1PeriphClockCmd(clock, ENABLE);
 8000214:	2101      	movs	r1, #1
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fa78 	bl	800070c <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Pin = pin;
 800021c:	897b      	ldrh	r3, [r7, #10]
 800021e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000220:	2301      	movs	r3, #1
 8000222:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000224:	2300      	movs	r3, #0
 8000226:	75bb      	strb	r3, [r7, #22]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000228:	2302      	movs	r3, #2
 800022a:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 800022c:	2302      	movs	r3, #2
 800022e:	757b      	strb	r3, [r7, #21]
    GPIO_Init(port, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	68f8      	ldr	r0, [r7, #12]
 8000238:	f000 f9a1 	bl	800057e <GPIO_Init>
}
 800023c:	bf00      	nop
 800023e:	3718      	adds	r7, #24
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <init_input>:

void init_input(GPIO_TypeDef* port, uint16_t pin, uint32_t clock) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b086      	sub	sp, #24
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	460b      	mov	r3, r1
 800024e:	607a      	str	r2, [r7, #4]
 8000250:	817b      	strh	r3, [r7, #10]
    GPIO_InitTypeDef GPIO_InitStruct;
    RCC_AHB1PeriphClockCmd(clock, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 fa59 	bl	800070c <RCC_AHB1PeriphClockCmd>

    GPIO_InitStruct.GPIO_Pin = pin;
 800025a:	897b      	ldrh	r3, [r7, #10]
 800025c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 800025e:	2300      	movs	r3, #0
 8000260:	753b      	strb	r3, [r7, #20]
    GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000262:	2301      	movs	r3, #1
 8000264:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000266:	2302      	movs	r3, #2
 8000268:	757b      	strb	r3, [r7, #21]
    GPIO_Init(port, &GPIO_InitStruct);
 800026a:	f107 0310 	add.w	r3, r7, #16
 800026e:	4619      	mov	r1, r3
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	f000 f984 	bl	800057e <GPIO_Init>
}
 8000276:	bf00      	nop
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <set_pin>:

void set_pin(GPIO_TypeDef* port, uint16_t pin, uint8_t state) {
 800027e:	b580      	push	{r7, lr}
 8000280:	b082      	sub	sp, #8
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	460b      	mov	r3, r1
 8000288:	807b      	strh	r3, [r7, #2]
 800028a:	4613      	mov	r3, r2
 800028c:	707b      	strb	r3, [r7, #1]
    if (state)
 800028e:	787b      	ldrb	r3, [r7, #1]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d005      	beq.n	80002a0 <set_pin+0x22>
        GPIO_SetBits(port, pin);
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	4619      	mov	r1, r3
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fa18 	bl	80006ce <GPIO_SetBits>
    else
        GPIO_ResetBits(port, pin);
}
 800029e:	e004      	b.n	80002aa <set_pin+0x2c>
        GPIO_ResetBits(port, pin);
 80002a0:	887b      	ldrh	r3, [r7, #2]
 80002a2:	4619      	mov	r1, r3
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f000 fa21 	bl	80006ec <GPIO_ResetBits>
}
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <read_button>:

uint8_t read_button(GPIO_TypeDef* port, uint16_t pin) {
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	460b      	mov	r3, r1
 80002bc:	807b      	strh	r3, [r7, #2]
    return GPIO_ReadInputDataBit(port, pin);
 80002be:	887b      	ldrh	r3, [r7, #2]
 80002c0:	4619      	mov	r1, r3
 80002c2:	6878      	ldr	r0, [r7, #4]
 80002c4:	f000 f9e9 	bl	800069a <GPIO_ReadInputDataBit>
 80002c8:	4603      	mov	r3, r0
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <blink_all_leds_and_buzzer>:

void blink_all_leds_and_buzzer(uint8_t times) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b084      	sub	sp, #16
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	e036      	b.n	8000352 <blink_all_leds_and_buzzer+0x7e>
        set_pin(RGB_GREEN_PORT, RGB_GREEN_PIN, 1);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2101      	movs	r1, #1
 80002e8:	481e      	ldr	r0, [pc, #120]	; (8000364 <blink_all_leds_and_buzzer+0x90>)
 80002ea:	f7ff ffc8 	bl	800027e <set_pin>
        set_pin(LED_RED1_PORT, LED_RED1_PIN, 1);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2102      	movs	r1, #2
 80002f2:	481c      	ldr	r0, [pc, #112]	; (8000364 <blink_all_leds_and_buzzer+0x90>)
 80002f4:	f7ff ffc3 	bl	800027e <set_pin>
        set_pin(LED_RED2_PORT, LED_RED2_PIN, 1);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <blink_all_leds_and_buzzer+0x94>)
 8000300:	f7ff ffbd 	bl	800027e <set_pin>
        set_pin(BUZZER_PORT, BUZZER_PIN, 1);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4818      	ldr	r0, [pc, #96]	; (800036c <blink_all_leds_and_buzzer+0x98>)
 800030c:	f7ff ffb7 	bl	800027e <set_pin>
        delay_ms(300);
 8000310:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000314:	f7ff ff5e 	bl	80001d4 <delay_ms>

        set_pin(RGB_GREEN_PORT, RGB_GREEN_PIN, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2101      	movs	r1, #1
 800031c:	4811      	ldr	r0, [pc, #68]	; (8000364 <blink_all_leds_and_buzzer+0x90>)
 800031e:	f7ff ffae 	bl	800027e <set_pin>
        set_pin(LED_RED1_PORT, LED_RED1_PIN, 0);
 8000322:	2200      	movs	r2, #0
 8000324:	2102      	movs	r1, #2
 8000326:	480f      	ldr	r0, [pc, #60]	; (8000364 <blink_all_leds_and_buzzer+0x90>)
 8000328:	f7ff ffa9 	bl	800027e <set_pin>
        set_pin(LED_RED2_PORT, LED_RED2_PIN, 0);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <blink_all_leds_and_buzzer+0x94>)
 8000334:	f7ff ffa3 	bl	800027e <set_pin>
        set_pin(BUZZER_PORT, BUZZER_PIN, 0);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	480b      	ldr	r0, [pc, #44]	; (800036c <blink_all_leds_and_buzzer+0x98>)
 8000340:	f7ff ff9d 	bl	800027e <set_pin>
        delay_ms(300);
 8000344:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000348:	f7ff ff44 	bl	80001d4 <delay_ms>
    for (uint8_t i = 0; i < times; i++) {
 800034c:	7bfb      	ldrb	r3, [r7, #15]
 800034e:	3301      	adds	r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	7bfa      	ldrb	r2, [r7, #15]
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	429a      	cmp	r2, r3
 8000358:	d3c4      	bcc.n	80002e4 <blink_all_leds_and_buzzer+0x10>
    }
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	3710      	adds	r7, #16
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40020000 	.word	0x40020000
 8000368:	40020400 	.word	0x40020400
 800036c:	40020800 	.word	0x40020800

08000370 <blink_rgb_green2>:

void blink_rgb_green2(uint8_t times) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < times; i++) {
 800037a:	2300      	movs	r3, #0
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e016      	b.n	80003ae <blink_rgb_green2+0x3e>
        set_pin(RGB_GREEN2_PORT, RGB_GREEN2_PIN, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000386:	480e      	ldr	r0, [pc, #56]	; (80003c0 <blink_rgb_green2+0x50>)
 8000388:	f7ff ff79 	bl	800027e <set_pin>
        delay_ms(300);
 800038c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000390:	f7ff ff20 	bl	80001d4 <delay_ms>
        set_pin(RGB_GREEN2_PORT, RGB_GREEN2_PIN, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039a:	4809      	ldr	r0, [pc, #36]	; (80003c0 <blink_rgb_green2+0x50>)
 800039c:	f7ff ff6f 	bl	800027e <set_pin>
        delay_ms(300);
 80003a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80003a4:	f7ff ff16 	bl	80001d4 <delay_ms>
    for (uint8_t i = 0; i < times; i++) {
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	3301      	adds	r3, #1
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfa      	ldrb	r2, [r7, #15]
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d3e4      	bcc.n	8000380 <blink_rgb_green2+0x10>
    }
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40020000 	.word	0x40020000

080003c4 <main>:

// ---------- HÀM CHÍNH ----------
int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
    uint8_t press_count_b3 = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
    uint16_t hold_counter_b5 = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	81bb      	strh	r3, [r7, #12]
    uint8_t led_b5_on = 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	72fb      	strb	r3, [r7, #11]

    // Khởi tạo LED và Buzzer
    init_output(LED_GREEN_PORT, LED_GREEN_PIN, LED_GREEN_CLOCK);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2120      	movs	r1, #32
 80003da:	4851      	ldr	r0, [pc, #324]	; (8000520 <main+0x15c>)
 80003dc:	f7ff ff13 	bl	8000206 <init_output>
    init_output(RGB_GREEN_PORT, RGB_GREEN_PIN, RGB_GREEN_CLOCK);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2101      	movs	r1, #1
 80003e4:	484e      	ldr	r0, [pc, #312]	; (8000520 <main+0x15c>)
 80003e6:	f7ff ff0e 	bl	8000206 <init_output>
    init_output(RGB_GREEN2_PORT, RGB_GREEN2_PIN, RGB_GREEN2_CLOCK);  // Khởi tạo LED RGB_GREEN PA11
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f0:	484b      	ldr	r0, [pc, #300]	; (8000520 <main+0x15c>)
 80003f2:	f7ff ff08 	bl	8000206 <init_output>
    init_output(LED_RED1_PORT, LED_RED1_PIN, LED_RED1_CLOCK);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2102      	movs	r1, #2
 80003fa:	4849      	ldr	r0, [pc, #292]	; (8000520 <main+0x15c>)
 80003fc:	f7ff ff03 	bl	8000206 <init_output>
    init_output(LED_RED2_PORT, LED_RED2_PIN, LED_RED2_CLOCK);
 8000400:	2202      	movs	r2, #2
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	4847      	ldr	r0, [pc, #284]	; (8000524 <main+0x160>)
 8000408:	f7ff fefd 	bl	8000206 <init_output>
    init_output(BUZZER_PORT, BUZZER_PIN, BUZZER_CLOCK);
 800040c:	2204      	movs	r2, #4
 800040e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000412:	4845      	ldr	r0, [pc, #276]	; (8000528 <main+0x164>)
 8000414:	f7ff fef7 	bl	8000206 <init_output>
    init_output(LED3_GREEN_PORT, LED3_GREEN_PIN, LED3_GREEN_CLOCK);  // Thêm LED3
 8000418:	2201      	movs	r2, #1
 800041a:	2120      	movs	r1, #32
 800041c:	4840      	ldr	r0, [pc, #256]	; (8000520 <main+0x15c>)
 800041e:	f7ff fef2 	bl	8000206 <init_output>

    // Khởi tạo nút nhấn
    init_input(BUTTON_B3_PORT, BUTTON_B3_PIN, BUTTON_B3_CLOCK);
 8000422:	2201      	movs	r2, #1
 8000424:	2110      	movs	r1, #16
 8000426:	483e      	ldr	r0, [pc, #248]	; (8000520 <main+0x15c>)
 8000428:	f7ff ff0c 	bl	8000244 <init_input>
    init_input(BUTTON_B5_PORT, BUTTON_B5_PIN, BUTTON_B5_CLOCK);
 800042c:	2202      	movs	r2, #2
 800042e:	2110      	movs	r1, #16
 8000430:	483c      	ldr	r0, [pc, #240]	; (8000524 <main+0x160>)
 8000432:	f7ff ff07 	bl	8000244 <init_input>

    // Nháy LED GREEN 3 lần khi khởi động
    for (int i = 0; i < 3; i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	e014      	b.n	8000466 <main+0xa2>
        set_pin(LED_GREEN_PORT, LED_GREEN_PIN, 1);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	4837      	ldr	r0, [pc, #220]	; (8000520 <main+0x15c>)
 8000442:	f7ff ff1c 	bl	800027e <set_pin>
        delay_ms(300);
 8000446:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800044a:	f7ff fec3 	bl	80001d4 <delay_ms>
        set_pin(LED_GREEN_PORT, LED_GREEN_PIN, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	4833      	ldr	r0, [pc, #204]	; (8000520 <main+0x15c>)
 8000454:	f7ff ff13 	bl	800027e <set_pin>
        delay_ms(300);
 8000458:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800045c:	f7ff feba 	bl	80001d4 <delay_ms>
    for (int i = 0; i < 3; i++) {
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3301      	adds	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b02      	cmp	r3, #2
 800046a:	dde7      	ble.n	800043c <main+0x78>
    }

    // ---------- VÒNG LẶP CHÍNH ----------
    while (1) {
        // Xử lý nút B3 nhấn 3 lần
        if (read_button(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESSED) {
 800046c:	2110      	movs	r1, #16
 800046e:	482c      	ldr	r0, [pc, #176]	; (8000520 <main+0x15c>)
 8000470:	f7ff ff1f 	bl	80002b2 <read_button>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d11f      	bne.n	80004ba <main+0xf6>
            delay_ms(20);  // debounce
 800047a:	2014      	movs	r0, #20
 800047c:	f7ff feaa 	bl	80001d4 <delay_ms>
            if (read_button(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESSED) {
 8000480:	2110      	movs	r1, #16
 8000482:	4827      	ldr	r0, [pc, #156]	; (8000520 <main+0x15c>)
 8000484:	f7ff ff15 	bl	80002b2 <read_button>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d115      	bne.n	80004ba <main+0xf6>
                while (read_button(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESSED);  // đợi nhả
 800048e:	bf00      	nop
 8000490:	2110      	movs	r1, #16
 8000492:	4823      	ldr	r0, [pc, #140]	; (8000520 <main+0x15c>)
 8000494:	f7ff ff0d 	bl	80002b2 <read_button>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f8      	beq.n	8000490 <main+0xcc>
                press_count_b3++;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3301      	adds	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
                if (press_count_b3 >= 3) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d907      	bls.n	80004ba <main+0xf6>
                    blink_all_leds_and_buzzer(3);
 80004aa:	2003      	movs	r0, #3
 80004ac:	f7ff ff12 	bl	80002d4 <blink_all_leds_and_buzzer>
                    blink_rgb_green2(3);   // Nháy LED RGB_GREEN PA11 3 lần
 80004b0:	2003      	movs	r0, #3
 80004b2:	f7ff ff5d 	bl	8000370 <blink_rgb_green2>
                    press_count_b3 = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }

        // Xử lý giữ nút B5 > 500ms để bật cả LED RGB_GREEN (PA0) và RGB_GREEN2 (PA11)
        if (read_button(BUTTON_B5_PORT, BUTTON_B5_PIN) == BTN_PRESSED) {
 80004ba:	2110      	movs	r1, #16
 80004bc:	4819      	ldr	r0, [pc, #100]	; (8000524 <main+0x160>)
 80004be:	f7ff fef8 	bl	80002b2 <read_button>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d11a      	bne.n	80004fe <main+0x13a>
            delay_ms(10);
 80004c8:	200a      	movs	r0, #10
 80004ca:	f7ff fe83 	bl	80001d4 <delay_ms>
            hold_counter_b5 += 100;
 80004ce:	89bb      	ldrh	r3, [r7, #12]
 80004d0:	3364      	adds	r3, #100	; 0x64
 80004d2:	81bb      	strh	r3, [r7, #12]
            if (hold_counter_b5 >= 500 && led_b5_on == 0) {
 80004d4:	89bb      	ldrh	r3, [r7, #12]
 80004d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004da:	d3c7      	bcc.n	800046c <main+0xa8>
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1c4      	bne.n	800046c <main+0xa8>
                set_pin(RGB_GREEN_PORT, RGB_GREEN_PIN, 1);  // Bật LED PA0
 80004e2:	2201      	movs	r2, #1
 80004e4:	2101      	movs	r1, #1
 80004e6:	480e      	ldr	r0, [pc, #56]	; (8000520 <main+0x15c>)
 80004e8:	f7ff fec9 	bl	800027e <set_pin>
                set_pin(RGB_GREEN2_PORT, RGB_GREEN2_PIN, 1); // Bật LED PA11
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <main+0x15c>)
 80004f4:	f7ff fec3 	bl	800027e <set_pin>
                led_b5_on = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	72fb      	strb	r3, [r7, #11]
 80004fc:	e7b6      	b.n	800046c <main+0xa8>
            }
        } else {
            // Khi nhả nút, tắt cả hai LED xanh
            hold_counter_b5 = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	81bb      	strh	r3, [r7, #12]
            led_b5_on = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	72fb      	strb	r3, [r7, #11]
            set_pin(RGB_GREEN_PORT, RGB_GREEN_PIN, 0);  // Tắt LED PA0
 8000506:	2200      	movs	r2, #0
 8000508:	2101      	movs	r1, #1
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x15c>)
 800050c:	f7ff feb7 	bl	800027e <set_pin>
            set_pin(RGB_GREEN2_PORT, RGB_GREEN2_PIN, 0); // Tắt LED PA11
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000516:	4802      	ldr	r0, [pc, #8]	; (8000520 <main+0x15c>)
 8000518:	f7ff feb1 	bl	800027e <set_pin>
        if (read_button(BUTTON_B3_PORT, BUTTON_B3_PIN) == BTN_PRESSED) {
 800051c:	e7a6      	b.n	800046c <main+0xa8>
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000
 8000524:	40020400 	.word	0x40020400
 8000528:	40020800 	.word	0x40020800

0800052c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	; (800056c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	; (8000570 <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	; (8000574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055a:	f000 f8f7 	bl	800074c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055e:	f7ff ff31 	bl	80003c4 <main>

08000562 <LoopForever>:

LoopForever:
    b LoopForever
 8000562:	e7fe      	b.n	8000562 <LoopForever>
  ldr   r0, =_estack
 8000564:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000570:	080007b4 	.word	0x080007b4
  ldr r2, =_sbss
 8000574:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000578:	2000001c 	.word	0x2000001c

0800057c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC_IRQHandler>

0800057e <GPIO_Init>:
 800057e:	b480      	push	{r7}
 8000580:	b087      	sub	sp, #28
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
 8000586:	6039      	str	r1, [r7, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	e076      	b.n	8000688 <GPIO_Init+0x10a>
 800059a:	2201      	movs	r2, #1
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d165      	bne.n	8000682 <GPIO_Init+0x104>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	2103      	movs	r1, #3
 80005c0:	fa01 f303 	lsl.w	r3, r1, r3
 80005c4:	43db      	mvns	r3, r3
 80005c6:	401a      	ands	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	4619      	mov	r1, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	431a      	orrs	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d003      	beq.n	80005f4 <GPIO_Init+0x76>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d12e      	bne.n	8000652 <GPIO_Init+0xd4>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	2103      	movs	r1, #3
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	401a      	ands	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	795b      	ldrb	r3, [r3, #5]
 8000612:	4619      	mov	r1, r3
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	431a      	orrs	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	685a      	ldr	r2, [r3, #4]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	b29b      	uxth	r3, r3
 800062a:	4619      	mov	r1, r3
 800062c:	2301      	movs	r3, #1
 800062e:	408b      	lsls	r3, r1
 8000630:	43db      	mvns	r3, r3
 8000632:	401a      	ands	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	7992      	ldrb	r2, [r2, #6]
 8000640:	4611      	mov	r1, r2
 8000642:	697a      	ldr	r2, [r7, #20]
 8000644:	b292      	uxth	r2, r2
 8000646:	fa01 f202 	lsl.w	r2, r1, r2
 800064a:	b292      	uxth	r2, r2
 800064c:	431a      	orrs	r2, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68da      	ldr	r2, [r3, #12]
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	b29b      	uxth	r3, r3
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2103      	movs	r1, #3
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	68da      	ldr	r2, [r3, #12]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	79db      	ldrb	r3, [r3, #7]
 8000672:	4619      	mov	r1, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	431a      	orrs	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	d985      	bls.n	800059a <GPIO_Init+0x1c>
 800068e:	bf00      	nop
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <GPIO_ReadInputDataBit>:
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	460b      	mov	r3, r1
 80006a4:	807b      	strh	r3, [r7, #2]
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	691a      	ldr	r2, [r3, #16]
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <GPIO_ReadInputDataBit+0x22>
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e001      	b.n	80006c0 <GPIO_ReadInputDataBit+0x26>
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	4618      	mov	r0, r3
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <GPIO_SetBits>:
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	807b      	strh	r3, [r7, #2]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	887a      	ldrh	r2, [r7, #2]
 80006de:	831a      	strh	r2, [r3, #24]
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <GPIO_ResetBits>:
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	807b      	strh	r3, [r7, #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	835a      	strh	r2, [r3, #26]
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <RCC_AHB1PeriphClockCmd>:
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d006      	beq.n	800072c <RCC_AHB1PeriphClockCmd+0x20>
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000722:	4909      	ldr	r1, [pc, #36]	; (8000748 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	630b      	str	r3, [r1, #48]	; 0x30
 800072a:	e006      	b.n	800073a <RCC_AHB1PeriphClockCmd+0x2e>
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <RCC_AHB1PeriphClockCmd+0x3c>)
 800072e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	43db      	mvns	r3, r3
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000736:	4013      	ands	r3, r2
 8000738:	630b      	str	r3, [r1, #48]	; 0x30
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <__libc_init_array>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4d0d      	ldr	r5, [pc, #52]	; (8000784 <__libc_init_array+0x38>)
 8000750:	4c0d      	ldr	r4, [pc, #52]	; (8000788 <__libc_init_array+0x3c>)
 8000752:	1b64      	subs	r4, r4, r5
 8000754:	10a4      	asrs	r4, r4, #2
 8000756:	2600      	movs	r6, #0
 8000758:	42a6      	cmp	r6, r4
 800075a:	d109      	bne.n	8000770 <__libc_init_array+0x24>
 800075c:	4d0b      	ldr	r5, [pc, #44]	; (800078c <__libc_init_array+0x40>)
 800075e:	4c0c      	ldr	r4, [pc, #48]	; (8000790 <__libc_init_array+0x44>)
 8000760:	f000 f818 	bl	8000794 <_init>
 8000764:	1b64      	subs	r4, r4, r5
 8000766:	10a4      	asrs	r4, r4, #2
 8000768:	2600      	movs	r6, #0
 800076a:	42a6      	cmp	r6, r4
 800076c:	d105      	bne.n	800077a <__libc_init_array+0x2e>
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f855 3b04 	ldr.w	r3, [r5], #4
 8000774:	4798      	blx	r3
 8000776:	3601      	adds	r6, #1
 8000778:	e7ee      	b.n	8000758 <__libc_init_array+0xc>
 800077a:	f855 3b04 	ldr.w	r3, [r5], #4
 800077e:	4798      	blx	r3
 8000780:	3601      	adds	r6, #1
 8000782:	e7f2      	b.n	800076a <__libc_init_array+0x1e>
 8000784:	080007ac 	.word	0x080007ac
 8000788:	080007ac 	.word	0x080007ac
 800078c:	080007ac 	.word	0x080007ac
 8000790:	080007b0 	.word	0x080007b0

08000794 <_init>:
 8000794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000796:	bf00      	nop
 8000798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800079a:	bc08      	pop	{r3}
 800079c:	469e      	mov	lr, r3
 800079e:	4770      	bx	lr

080007a0 <_fini>:
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	bf00      	nop
 80007a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a6:	bc08      	pop	{r3}
 80007a8:	469e      	mov	lr, r3
 80007aa:	4770      	bx	lr
